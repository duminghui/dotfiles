" Modeline {{
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={{,}} foldlevel=0 foldmethod=marker spell:
" }}

" Automatic install vim-plug {{
let s:vimrc_home = expand("<sfile>:h")
if expand("<sfile>:t") == "init.vim"
    let s:vimrc_home .= '/'
else
    let s:vimrc_home .= '/.vim/'
endif

function! Dot_vim(path)
    return s:vimrc_home . a:path
endfunction

let s:plug_file = Dot_vim('autoload/plug.vim')

if !filereadable(expand(s:plug_file))
    execute "silent !curl -fLo " . s:plug_file . " --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    autocmd VimEnter * PlugInstall | source $MYVIMRC
     " silent !curl -fLo s:plug_file --create-dirs
                " \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" if has('nvim')
"     if empty(glob('~/.config/nvim/autoload/plug.vim'))
"         silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
"                     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"         autocmd VimEnter * PlugInstall | source $MYVIMRC
"     endif
" else
"     if empty(glob('~/.vim/autoload/plug.vim'))
"         silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"                     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"         autocmd VimEnter * PlugInstall | source $MYVIMRC
"     endif
" endif
" }}

" Plug Config Help Functions {{
let s:plug_msgs=[]
function! s:ShowPlugMsgs()
    if len(s:plug_msgs)
        for msg in s:plug_msgs
            echom msg
        endfor
        call remove(s:plug_msgs,0,len(s:plug_msgs)-1)
    endif
endfunction

autocmd! BufEnter * call s:ShowPlugMsgs()

function! PlugIsReady(name)
    let l:count = count(g:plugs_order,a:name)
    let l:isdirectory = isdirectory(expand(g:plug_home . "/" . a:name,1))
    if l:count && l:isdirectory
        unlet l:count
        unlet l:isdirectory
        return 1
    endif
    " call s:Pecho("Plug is not Ready:" . a:name . " c:" . l:count . " d:" . l:isdirectory)
    call add(s:plug_msgs,"Plug [" . a:name . "] isn't Ready: c:" . l:count ." d:" . l:isdirectory)
    unlet l:count
    unlet l:isdirectory
endfunction

function! Cond(cond, ...)
    let opts = get(a:000, 0, {})
    return a:cond ? opts : extend(opts, {'on':[],'for':[]})
endfunction
" }}

" Install Plugs {{
" PlugInstall
call plug#begin()
" call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'powerline/fonts'
Plug 'altercation/vim-colors-solarized'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'scrooloose/nerdtree'
" Plug 'spf13/vim-colors'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'rhysd/conflict-marker.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/sessionman.vim'
Plug 'matchit.zip'
Plug 'bling/vim-bufferline'
Plug 'easymotion/vim-easymotion'
" Plug 'flazz/vim-colorschemes'
Plug 'mbbill/undotree'
Plug 'nathanaelkane/vim-indent-guides'
"""""""""""""""""""
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-abolish'
Plug 'osyo-manga/vim-over'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'gcmt/wildfire.vim'
Plug 'reedes/vim-textobj-sentence'
Plug 'reedes/vim-textobj-quote'
" """""""""""""""""""""""
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'mattn/webapi-vim'
" Plug 'mattn/gist-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular'
Plug 'luochen1990/rainbow'
Plug 'majutsushi/tagbar',Cond(executable('ctags'))
"""""""""""""""""""""""""""""""
Plug 'Valloric/YouCompleteMe',{'do':'./install.py'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
"""""""""""""""""""""""""""""""
Plug 'tpope/vim-markdown'
Plug 'spf13/vim-preview'
"""""""""""""""""""""""""""""""
" 中文档
Plug 'vimcn/vimcdoc',Cond(!has('nvim'))
Plug 'vimcn/ctrlp.cnx'
Plug 'vimcn/NERD_tree.vim.cnx'
Plug 'vimcn/NERD_commenter.cnx'
"""""""""""""""""""""""
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'udalov/kotlin-vim'
Plug 'Valloric/ListToggle'
" 更多格式的C#highlighting
Plug 'OrangeT/vim-csharp'
" C#环境
Plug 'OmniSharp/omnisharp-vim',{'do':'cd server;xbuild'}
Plug 'tpope/vim-dispatch'
" 在nerdtree中显示git状态
Plug 'Xuyuanp/nerdtree-git-plugin'
" vim open a file:line
Plug 'bogado/file-line'
" " 使用[]做快捷键
" Plug 'tpope/vim-unimpaired'

call plug#end()

" }}

" General {{
set nocompatible
set background=dark
filetype plugin indent on
syntax on
set mouse&
set mousehide
scriptencoding utf-8
" * register使用copy-paste
set clipboard=unnamed
" 防止打开一个新buffer的时候自动选择当前文件的目录
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
"set autowrite                       " Automatically write a file when leaving a modified buffer
set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
set spell                           " Spell checking on
set hidden                          " Allow buffer switching without saving
set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator
" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Restore cursor to file in previous editing session {{
" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END
" }}

" Setting up the directories {{
set backup                  " Backups are nice ...
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

" Add exclusions to mkview and loadview
" eg: *.*, svn-commit.tmp
let g:skipview_files = [
            \ '\[example pattern\]'
            \ ]
" }}
" }}

" Vim UI {{

set textwidth=80
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cmdheight=2
set cursorline                  " Highlight current line
set cursorcolumn
set colorcolumn=+1

highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
"highlight clear CursorLineNr    " Remove highlight color from current line number

if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and  Selected characters/lines in visual mode
endif

if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    if PlugIsReady('vim-fugitive')
    " if filereadable(expand(g:plug_home . "/vim-fugitive/plugin/fugitive.vim"))
        set statusline+=%{fugitive#statusline()} " Git Hotness
    endif
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set relativenumber
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

if &term == 'xterm' || &term == 'screen'
    set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
endif
" }}

" Formatting {{

" set nowrap                      " Do not wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
"set matchpairs+=<:>             " Match, to be used with %
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
" Remove trailing whitespaces and ^M chars
" To disable the stripping of whitespace, add the following to your
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()

"autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
" preceding line best in a plugin but here for now.

autocmd BufNewFile,BufRead *.coffee set filetype=coffee

" Workaround vim-commentary for Haskell
autocmd FileType haskell setlocal commentstring=--\ %s
" Workaround broken colour highlighting in Haskell
autocmd FileType haskell,rust setlocal nospell

" }}

" Key (re)Mappings {{
let mapleader = ','
let maplocalleader = '_'
noremap <leader>ev :split $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>
" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Stupid shift key fixes
if has("user_commands")
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

cmap Tabe tabe


" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

" Most prefer to toggle search highlighting rather than clear the current
" search results. To clear search highlighting rather than toggle it on
" and off, add the following to your .vimrc.before.local file:
nmap <silent> <leader>/ :nohlsearch<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
" map <leader>ev :vsp %%
map <leader>et :tabe %%

" Adjust viewports to the same size
map <Leader>= <C-w>=

" Map <Leader>ff to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" Easier horizontal scrolling
map zl zL
map zh zH

" Easier formatting
nnoremap <silent> <leader>q gwip

" FIXME: Revert this f70be548
" fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH
map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>

" }}

" Funcations {{
" Initialize directories {{
if !has('nvim')
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = 'vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        let common_dir = parent . '/.' . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
else
    set backupdir-=.
    for backupdir in split(&backupdir,',')
        if exists("*mkdir")
            if !isdirectory(backupdir)
                call mkdir(backupdir)
            endif
        endif
        if !isdirectory(backupdir)
            echo "Warning: Unable to create backup directory: " . backupdir
            echo "Try: mkdir -p " . backupdir
        endif
    endfor
endif
" }}

" Strip whitespace {{
function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" }}

" Shell command {{
function! s:RunShellCommand(cmdline)
    botright new

    setlocal buftype=nofile
    setlocal bufhidden=delete
    setlocal nobuflisted
    setlocal noswapfile
    setlocal nowrap
    setlocal filetype=shell
    setlocal syntax=shell

    call setline(1, a:cmdline)
    call setline(2, substitute(a:cmdline, '.', '=', 'g'))
    execute 'silent $read !' . escape(a:cmdline, '%#')
    setlocal nomodifiable
    1
endfunction

command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
" e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
" }}
" }}

