" 一些工具方法

function! utils#init()
endfunction

let g:vim_plug = {}
function! g:vim_plug.autoinstall() abort
    let l:plug_file = '~/.config/nvim/autoload/plug.vim'
    if !has('nvim')
        let l:plug_file = '~/.vim/autoload/plug.vim'
    endif
    if !filereadable(expand(l:plug_file))
        silent execute "!curl -fLo " . l:plug_file . " --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
        autocmd VimEnter * PlugInstall | source $MYVIMRC
    endif
endfunction

let s:plug_mes=[]
function! g:vim_plug.show_mes()
    if len(s:plug_mes)
        for msg in s:plug_mes
            echom msg
        endfor
        call remove(s:plug_mes,  0,  len(s:plug_mes)-1)
    endif
endfunction

function! g:vim_plug.is_ready(name) abort
    if exists('g:loaded_plug')
        let l:count = count(g:plugs_order , a:name)
        let l:isdirectory = isdirectory(expand(g:plug_home . "/" . a:name , 1))
        if l:count && l:isdirectory
            return 1
        endif
        call add(s:plug_mes,  "Plug [" . a:name . "] isn't Ready: c:" . l:count ." d:" . l:isdirectory)
    else
        return 0
    endif
endfunction

function! g:vim_plug.cond(cond,...)
    let l:opts = get(a:000, 0, {})
    return a:cond ? l:opts : extend(l:opts, {'on':[],'for':[]})
endfunction

let g:utils = {}
function! g:utils.get_highlight_colors(group_name,  ...) abort
    redir => highlight
    silent execute 'silent highlight ' . a:group_name
    redir END

    if(matchend(highlight,  "cleared") >= 0)
        let l:colors = {}
        for l:key in a:000
            let l:colors[l:key] = 'NONE'
        endfor
        return l:colors
    endif

    let l:link_matches = matchlist(highlight, 'links to \(\S\+\)')
    if len(l:link_matches) > 0 " follow the link
        return call(self.get_highlight_colors,  [l:link_matches[1]] + a:000,  self)
    endif
    let l:colors        = {}
    let l:cterm_pattern = '=\([0-9A-Za-z]\+\)'
    let l:gui_pattern   = '=\([#0-9A-Za-z]\+\)'
    let l:key_pattern   = ''
    for l:key in a:000
        if matchend(l:key,'^gui') > 0
            let l:key_pattern = l:key . l:gui_pattern
        else
            let l:key_pattern = l:key . l:cterm_pattern
        endif
        let l:colors[l:key] = s:match_highlight(highlight,  l:key_pattern)
    endfor
    return l:colors
endfunction

function! s:match_highlight(highlight,  pattern) abort
    let matches = matchlist(a:highlight, a:pattern)
    if len(matches) == 0
        return 'NONE'
    endif
    return matches[1]
endfunction

function! g:utils.generate_diff_groups_highlight() abort
        " 背景色用SignColumn的
        " 前景色用对应的相关的颜色的
        let l:bg = g:utils.get_highlight_colors('SignColumn',  'ctermbg',  'guibg')

        call g:utils.generate_highlight('MyDiffAdd',     {'DiffAdd'    : ['ctermfg',  'gui',  'guifg']},  l:bg)
        call g:utils.generate_highlight('MyDiffChange',  {'DiffChange' : ['ctermfg',  'gui',  'guifg']},  l:bg)
        call g:utils.generate_highlight('MyDiffDelete',  {'DiffDelete' : ['ctermfg',  'gui',  'guifg']},  l:bg)

        highlight default link MyDiffChangeDelete MyDiffChange

        " hi MyDiffAdd
        " hi MyDiffChange
        " hi MyDiffDelete
        " hi MyDiffChangeDelete
endfunction

function! g:utils.generate_highlight(group_name, group_src, highlight_extend)
    let l:group_dst = {}
    for[l:group_name, l:keys] in items(a:group_src)
        call extend(l:group_dst, call(g:utils.get_highlight_colors, [l:group_name] + l:keys))
    endfor
    call extend(l:group_dst, a:highlight_extend)
    call s:generate_highlight(a:group_name, l:group_dst)
endfunction

function! s:generate_highlight(group_name,  color_dict)
    for [l:key,  l:color] in items(a:color_dict)
        silent execute  'silent highlight ' . a:group_name . ' ' . l:key . '=' . l:color
    endfor
endfunction
