"#################
"##  基本配置  ###
"#################

" General {{{
" 去除蜂鸣:
set belloff=esc,spell
set nocompatible
" set background=dark
filetype plugin indent on
syntax on
set mouse&
set mousehide
set encoding=utf-8
scriptencoding utf-8
" * register使用copy-paste
set clipboard=unnamed
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
" 防止打开一个新buffer的时候自动选择当前文件的目录
if !exists('g:vscode')
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
endif
"set autowrite                       " Automatically write a file when leaving a modified buffer
" 控制状态栏显示的选项 :h shortmess
set shortmess+=filmnrwxoOtT         " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
" set spell                           " Spell checking on
set hidden                          " Allow buffer switching without saving
set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator
" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG call setpos('.',  [0,  1,  1,  0])

" Restore cursor to file in previous editing session {{{
" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
if !exists('g:vscode')
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END
endif
" }}}

" Setting up the directories {{{
if !exists('g:vscode')
    set backup                  " Backups are nice ...
    if has('persistent_undo')
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif
endif
" set nobackup

" }}}

" }}}

" UI {{{

" set textwidth=80
set linebreak
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cmdheight=2
set cursorline                  " Highlight current line
set cursorcolumn                " Highlight current column
set columns=120
set colorcolumn=+1
" 设置窗口的分配线和fold线
set fillchars=vert:\|,fold:-
" 把这三行移到vim-colors-solarized.vim中进行配置才能起作用
" highlight clear SignColumn      " SignColumn should match background
" highlight clear LineNr          " Current line number row will have same background color in relative mode
" "highlight clear CursorLineNr    " Remove highlight color from current line number

if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and  Selected characters/lines in visual mode
endif

set ruler "显示最后一行的状态
set laststatus=2 "两行状态行+一行命令行

" if has('statusline')
"     set laststatus=2

"     " Broken down into easily includeable segments
"     set statusline=%<%f\                     " Filename
"     set statusline+=%w%h%m%r                 " Options
"     if g:vim_plug.is_ready('vim-fugitive')
"         set statusline+=%{fugitive#statusline()} " Git Hotness
"     endif
"     set statusline+=\ [%{&ff}/%Y]            " Filetype
"     set statusline+=\ [%{getcwd()}]          " Current dir
"     set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
" endif

set backspace=indent,eol,start  " Backspace for dummies
set lines=30
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set relativenumber              "显示相对行号
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scroll=13
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›■,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
if &term == 'xterm' || &term == 'screen'
    set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
endif

function! NeatFoldText() "{{{
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}

" GUI {{{

if has('gui_running')
    set guioptions-=T
    set lines=40
    set guifont=Monaco:h12
    set noantialias
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set nospell
endif
" }}}
" }}}

" Formatting {{{

" set nowrap                      " Do not wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
"set matchpairs+=<:>             " Match, to be used with %
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
" Remove trailing whitespaces and ^M chars
" To disable the stripping of whitespace, add the following to your

"autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
" preceding line best in a plugin but here for now.

autocmd BufNewFile,BufRead *.coffee set filetype=coffee
autocmd BufNewFile,BufRead *.vim.insymlink set filetype=vim

" fix ShaderHighLight Load Bug
autocmd BufNewFile,BufRead *.cg set filetype=cg
autocmd BufNewFile,BufRead *.hlsl,*.hlslc,*.hlslh,*.hlsl set filetype=hlsl
autocmd BufNewFile,BufRead *.glsl,*.geom,*.vert,*.frag,*.gsh,*.vsh,*.fsh,*.vs,*.fs set filetype=glsl
autocmd BufNewFile,BufRead *.shader set filetype=shaderlab

" Workaround vim-commentary for Haskell
autocmd FileType haskell setlocal commentstring=--\ %s
" Workaround broken colour highlighting in Haskell
autocmd FileType haskell,rust setlocal nospell

" }}}

" Key (re)Mappings {{{
let mapleader = ','
noremap \ ,
let maplocalleader = '_'
noremap <leader>ve :split $MYVIMRC<CR>
noremap <leader>vs :source $MYVIMRC<CR>
" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap gj j
noremap k gk
noremap gk k

cmap Tabe tabe

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

nmap <leader>/ :nohlsearch<CR>

" Easier horizontal scrolling
map zl zL
map zh zH

" }}}

" Initialize directories {{{
if !has('nvim')
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = 'vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        let common_dir = parent . '/.' . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . '/' . '.' . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
else
    set backupdir-=.
    for backupdir in split(&backupdir,',')
        if exists("*mkdir")
            if !isdirectory(backupdir)
                call mkdir(backupdir)
            endif
        endif
        if !isdirectory(backupdir)
            echo "Warning: Unable to create backup directory: " . backupdir
            echo "Try: mkdir -p " . backupdir
        endif
    endfor
endif
" }}}

if (has("win64"))
    augroup im
        autocmd!
        autocmd InsertLeave,BufEnter * :silent :!im-select.exe 1033
    augroup END
endif

"###################
"##  插件管理器  ###
"###################

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin()

" use normal easymotion when in vim mode
Plug 'easymotion/vim-easymotion', Cond(!exists('g:vscode'))
" use vscode easymotion when in vscode mode
Plug 'asvetliakov/vim-easymotion', Cond(exists('g:vscode'), { 'as': 'vsc-easymotion' })

Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'luochen1990/rainbow'
Plug 'bronson/vim-trailing-whitespace'

call plug#end()

" luochen1990/rainbow
let g:rainbow_active = 1
