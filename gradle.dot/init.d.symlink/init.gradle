allprojects {
    def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public'
    def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/repository/jcenter'
    def ALIYUN_GOOGLE_URL = 'https://maven.aliyun.com/repository/google'
    def map=[
    'htts://repo1.maven.org/maven2':ALIYUN_REPOSITORY_URL,
    'https://jcenter.bintray.com':ALIYUN_JCENTER_URL,
    'https://dl.google.com':ALIYUN_GOOGLE_URL
    ]
    buildscript {
        repositories {
            all { ArtifactRepository repo ->
                if(repo instanceof MavenArtifactRepository){
                    def url = repo.url.toString()
                    map.each{ key,value->
                        if(url.startsWith(key)){
                            project.logger.lifecycle "WARNING: BuildScript Repository ${url} replaced by ${value}."
                            remove repo
                            return
                        }
                    }
                }
            }
            maven{
                url ALIYUN_REPOSITORY_URL
            }
            maven {
                url ALIYUN_JCENTER_URL
            }
            maven {
                url ALIYUN_GOOGLE_URL
            }
        }
    }
    repositories {
        all { ArtifactRepository repo ->
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                map.each{ key,value->
                    if(url.startsWith(key)){
                        project.logger.lifecycle "WARNING: Repository ${url} replaced by ${value}."
                        remove repo
                        return
                    }
                }
            }
        }
        maven{
            url ALIYUN_REPOSITORY_URL
        }
        maven {
            url ALIYUN_JCENTER_URL
        }
        maven {
            url ALIYUN_GOOGLE_URL
        }
    }

    task showRepos {
        doLast {
            description 'Show Tasks in Gradle Project'
                group 'custom'
                println "All repos:"
                repositories.each {
                    if (it.metaClass.hasProperty(it, 'url') != null) {
                        println "repo: ${it.name} ('${it.url}')"
                    } else if (it.metaClass.hasProperty(it, 'dirs') != null) {
                        println "repo: ${it.name} ('${it.dirs}')"
                    }
                }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }
    tasks.withType(Javadoc){
        options.encoding = "UTF-8"
        options.charSet = "UTF-8"
    }
    configurations.all {
         // resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
         // resolutionStrategy.cacheChangingModulesFor 10, 'minutes'
    }
}
