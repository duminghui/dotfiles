" Modeline {{{
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={{{,}}} foldlevel=0 foldmethod=marker :
" }}}
call utils#init()
call g:vim_plug.autoinstall()
autocmd! BufEnter * call g:vim_plug.show_mes()

" Install Plugs {{{
" PlugInstall
" call plug#begin()

if has('nvim')
    call plug#begin('~/.local/share/nvim/plugged')
else
    call plug#begin('~/.vim/plugged')
endif

" Yet Another Remote Plugin Framework for Neovim {{{
Plug 'roxma/nvim-yarp', g:vim_plug.cond(!has('nvim'))
Plug 'roxma/vim-hug-neovim-rpc', g:vim_plug.cond(!has('nvim'))
"}}}

" Color Themes {{{
" Plug 'powerline/fonts'
" Plug 'altercation/vim-colors-solarized'
" Plug 'spf13/vim-colors', g:vim_plug.cond(1)
" Plug 'w0ng/vim-hybrid', g:vim_plug.cond(1)
Plug 'flazz/vim-colorschemes', g:vim_plug.cond(0)
Plug 'kristijanhusak/vim-hybrid-material', g:vim_plug.cond(1)
Plug 'rakr/vim-one', g:vim_plug.cond(1)
Plug 'sonph/onehalf', g:vim_plug.cond(1, {'rtp': 'vim'})
Plug 'guns/xterm-color-table.vim'
" 导出airline的主题成tmux的主题
Plug 'edkolev/tmuxline.vim', g:vim_plug.cond(0)
"}}}

" interface funcation extend {{{
Plug 'vim-airline/vim-airline', g:vim_plug.cond(1)
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ctrlspace/vim-ctrlspace', g:vim_plug.cond(1)
Plug 'ctrlpvim/ctrlp.vim', g:vim_plug.cond(0)
Plug 'tacahiroy/ctrlp-funky', g:vim_plug.cond(0)
Plug 'Shougo/denite.nvim', g:vim_plug.cond(1,
            \ has('nvim') ? {'do': ':UpdateRemotePlugins'} : {})
Plug 'bling/vim-bufferline'
Plug 'scrooloose/nerdtree'
Plug 'vimcn/NERD_tree.vim.cnx'
Plug 'jistr/vim-nerdtree-tabs'
" 在nerdtree中显示git状态
Plug 'Xuyuanp/nerdtree-git-plugin'
" tmux中在vim的pane下显示一个小窗口运行
" Plug 'benmills/vimux',g:vim_plug.cond(0)
" auto mkview loadview
" 这个不用, 会影响nerdtree和tagbar的展示
" Plug 'vim-scripts/restore_view.vim', g:vim_plug.cond(0)
" Plug 'vim-scripts/sessionman.vim', g:vim_plug.cond(0)
Plug 'mbbill/undotree'
" 使用[]做快捷键
Plug 'tpope/vim-unimpaired', g:vim_plug.cond(1)
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Konfekt/FastFold', g:vim_plug.cond(1)
" 彩色显示({[<>]})等
Plug 'luochen1990/rainbow'
Plug 'bronson/vim-trailing-whitespace'
"把qucikfix中的文件生成args
Plug 'nelstrom/vim-qargs'
" 搜索时高亮显示要搜索的字符 :OverCommandLine
Plug 'osyo-manga/vim-over'
Plug 'bronson/vim-visual-star-search'
"}}}

" type expend {{{

" 这个会影响OmniSharp/omnisharp-vim启动server，会启动两次mono,暂时不使用
" Plug 'bogado/file-line', g:vim_plug.cond(0)
" 回到normal模式时,暂入法自动转换为英文格式
Plug 'CodeFalling/fcitx-vim-osx'
Plug 'tpope/vim-repeat'
" Plug 'matchit.zip', g:vim_plug.cond(0)
" """""""""""""""""""""""""
Plug 'tpope/vim-surround', g:vim_plug.cond(1)
Plug 'jiangmiao/auto-pairs', g:vim_plug.cond(1)
Plug 'terryma/vim-multiple-cursors', g:vim_plug.cond(1)
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/vim-easyoperator-line'
Plug 'haya14busa/vim-easyoperator-phrase'

" 交换两个textobject的位置, 第一次使用cx{motion}选择源目标,
" 第二次使用选择目标位置,cxx:line,X:Visual mode, cxc:clean
Plug 'tommcdo/vim-exchange'

" 使用c,d,s等操作时不改变缓存区
Plug 'svermeulen/vim-easyclip', g:vim_plug.cond(0)

" 英文输入修正
" Plug 'tpope/vim-abolish', g:vim_plug.cond(0)
" 对齐插件
Plug 'godlygeek/tabular'
" 以表格的方式输入数据
" Plug 'dhruvasagar/vim-table-mode', g:vim_plug.cond(0)
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-lastpat'
Plug 'reedes/vim-textobj-sentence'
Plug 'reedes/vim-textobj-quote'
"  i', i", i), i], i}, ip and it.
Plug 'gcmt/wildfire.vim'

" }}}

" Program Utils {{{
" Plug 'Valloric/YouCompleteMe', g:vim_plug.cond(0, {'do':  './install.py'})
" Plug 'maralla/completor.vim', g:vim_plug.cond(0)
" 还没有完成和ultisnips整合，先不用
" Plug 'ervandew/supertab'
" 另一个自动补全工具,先试试
" Plug 'prabirshrestha/asyncomplete.vim', g:vim_plug.cond(0)
" Plug 'prabirshrestha/async.vim', g:vim_plug.cond(0)
" Plug 'prabirshrestha/vim-lsp', g:vim_plug.cond(0)
" Plug 'prabirshrestha/asyncomplete-lsp.vim', g:vim_plug.cond(0)
" Plug 'prabirshrestha/asyncomplete-buffer.vim', g:vim_plug.cond(0)
" Plug 'prabirshrestha/asyncomplete-ultisnips.vim', g:vim_plug.cond(0)
" Plug 'yami-beta/asyncomplete-omni.vim', g:vim_plug.cond(0)
" Plug 'prabirshrestha/asyncomplete-gocode.vim', g:vim_plug.cond(0)
Plug 'Shougo/deoplete.nvim', g:vim_plug.cond(1,
            \ has('nvim') ? {'do': ':UpdateRemotePlugins' } : {})
" 这个插件会引起在编辑.vimrc文件的时候,第一次保存之后重新载入文件,fold会全部折叠
Plug 'Shougo/neosnippet.vim', g:vim_plug.cond(1)
Plug 'Shougo/neosnippet-snippets', g:vim_plug.cond(1)
" Plug 'SirVer/ultisnips', g:vim_plug.cond(0)
" Plug 'honza/vim-snippets', g:vim_plug.cond(0)
Plug 'Shougo/context_filetype.vim', g:vim_plug.cond(1)
" deoplete source: vim
Plug 'Shougo/neco-vim', g:vim_plug.cond(1)
Plug 'scrooloose/nerdcommenter'
Plug 'vimcn/NERD_commenter.cnx'
Plug 'tpope/vim-commentary'
" Plug 'majutsushi/tagbar'
Plug 'majutsushi/tagbar',  g:vim_plug.cond(executable('ctags'))
" Plug 'vim-syntastic/syntastic',g:vim_plug.cond(1)
" 在vim 8上使用的格式检测的,使用job
Plug 'w0rp/ale', g:vim_plug.cond(1)
Plug 'Valloric/ListToggle'
"在sign上显示版本控制相关的标记
" Plug 'mhinz/vim-signify',  g:vim_plug.cond(0)
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" 在sign显示marks
Plug 'kshenoy/vim-signature', g:vim_plug.cond(1)
" 标记、跳转冲突的 <<<<<<,========,>>>>>>>
Plug 'rhysd/conflict-marker.vim'
Plug 'mattn/webapi-vim'
Plug 'udalov/kotlin-vim', {'for': 'kotlin'}
" Goland
Plug 'zchee/deoplete-go', g:vim_plug.cond(1, {'for': 'go', 'do': 'make'})
Plug 'fatih/vim-go', g:vim_plug.cond(1, {'for': 'go', 'do': ':GoUpdateBinaries'})
" 分割或合并strcut显示
Plug 'AndrewRadev/splitjoin.vim', g:vim_plug.cond(1)
" Plug 'OmniSharp/omnisharp-vim',  {'do': 'cd server;xbuild',  'for': 'cs'}
" Plug 'tpope/vim-dispatch', g:vim_plug.cond(1, {'for': 'cs'})
" Plug 'OrangeT/vim-csharp', {'for': 'cs'}
" 着色器高亮
" Plug 'vim-scripts/ShaderHighLight', {'for': ['cg', 'hlsl', 'glsl', 'shaderlab']}
Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'spf13/vim-preview', {'for': 'markdown'}
Plug 'keith/tmux.vim', {'for': 'tmux'}

" }}}
"""""""""""""""""""""""""""""""
" 中文档
" Plug 'vimct/vimcdoc',  g:vim_plug.cond(!has('nvim'))
" Plug 'vimcn/vimcdoc',  g:vim_plug.cond(1)
"""""""""""""""""""""""
call plug#end()
" }}}

" General {{{
" 去除蜂鸣声
set belloff=esc,spell
set nocompatible
" set background=dark
filetype plugin indent on
syntax on
set mouse&
set mousehide
set encoding=utf-8
scriptencoding utf-8
" * register使用copy-paste
set clipboard=unnamed
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
" 防止打开一个新buffer的时候自动选择当前文件的目录
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
"set autowrite                       " Automatically write a file when leaving a modified buffer
" 控制状态栏显示的选项 :h shortmess
set shortmess+=filmnrwxoOtT         " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=1000                    " Store a ton of history (default is 20)
" set spell                           " Spell checking on
set hidden                          " Allow buffer switching without saving
set iskeyword-=.                    " '.' is an end of word designator
set iskeyword-=#                    " '#' is an end of word designator
set iskeyword-=-                    " '-' is an end of word designator
" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG call setpos('.',  [0,  1,  1,  0])

" Restore cursor to file in previous editing session {{{
" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END
" }}}

" Setting up the directories {{{
set backup                  " Backups are nice ...
if has('persistent_undo')
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

" }}}

" }}}

" UI {{{

" set textwidth=80
set linebreak
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cmdheight=2
set cursorline                  " Highlight current line
set cursorcolumn                " Highlight current column"
set colorcolumn=+1
" 设置窗口的分配线和fold线
set fillchars=vert:\|,fold:-
" 把这三行移到vim-colors-solarized.vim中进行配置才能起作用
" highlight clear SignColumn      " SignColumn should match background
" highlight clear LineNr          " Current line number row will have same background color in relative mode
" "highlight clear CursorLineNr    " Remove highlight color from current line number

if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and  Selected characters/lines in visual mode
endif

" if has('statusline')
"     set laststatus=2

"     " Broken down into easily includeable segments
"     set statusline=%<%f\                     " Filename
"     set statusline+=%w%h%m%r                 " Options
"     if g:vim_plug.is_ready('vim-fugitive')
"         set statusline+=%{fugitive#statusline()} " Git Hotness
"     endif
"     set statusline+=\ [%{&ff}/%Y]            " Filetype
"     set statusline+=\ [%{getcwd()}]          " Current dir
"     set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
" endif

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set relativenumber
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
if &term == 'xterm' || &term == 'screen'
    set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
endif

function! NeatFoldText() "{{{
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}

" GUI {{{

if has('gui_running')
    set guioptions-=T
    set lines=40
    set guifont=Monaco:h12
    set noantialias
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set nospell
endif
" }}}
" }}}

" Formatting {{{

" set nowrap                      " Do not wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
"set matchpairs+=<:>             " Match, to be used with %
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
"set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
" Remove trailing whitespaces and ^M chars
" To disable the stripping of whitespace, add the following to your

"autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
" preceding line best in a plugin but here for now.

autocmd BufNewFile,BufRead *.coffee set filetype=coffee
autocmd BufNewFile,BufRead *.vim.insymlink set filetype=vim

" fix ShaderHighLight Load Bug
autocmd BufNewFile,BufRead *.cg set filetype=cg
autocmd BufNewFile,BufRead *.hlsl,*.hlslc,*.hlslh,*.hlsl set filetype=hlsl
autocmd BufNewFile,BufRead *.glsl,*.geom,*.vert,*.frag,*.gsh,*.vsh,*.fsh,*.vs,*.fs set filetype=glsl
autocmd BufNewFile,BufRead *.shader set filetype=shaderlab

" Workaround vim-commentary for Haskell
autocmd FileType haskell setlocal commentstring=--\ %s
" Workaround broken colour highlighting in Haskell
autocmd FileType haskell,rust setlocal nospell

" }}}

" Key (re)Mappings {{{
let mapleader = ','
noremap \ ,
let maplocalleader = '_'
noremap <leader>ve :split $MYVIMRC<CR>
noremap <leader>vs :source $MYVIMRC<CR>
" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap gj j
noremap k gk
noremap gk k

" Stupid shift key fixes
if has("user_commands")
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

cmap Tabe tabe


" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

nmap <silent> <leader>/ :nohlsearch<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Adjust viewports to the same size
map <Leader>= <C-w>=

" Map <Leader>ff to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" Easier horizontal scrolling
map zl zL
map zh zH

" Easier formatting
" nnoremap <silent> <leader>q gwip

" FIXME: Revert this f70be548
" fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH
map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

nnoremap [b :bprev<CR>
nnoremap ]b :bnext<CR>

" motion.txt
" map [[ ?{<CR>w99[{
" map ][ /{<CR>b99]}
" map ]] j0[[%/{<CR>
" map [] k$][%?}<CR>

" Toggle background {{{
" Allow to trigger background
function! ToggleBG()
    let s:tbg = &background
    " Inversion
    if s:tbg == "dark"
        set background=light
    else
        set background=dark
    endif
endfunction
noremap <leader>bg :call ToggleBG()<CR>

    " }}}

" }}}

" Misc {{{
" OmniComplete{{{
" if has("autocmd") && exists("+omnifunc")
    " autocmd Filetype *
    "             \if &omnifunc == "" |
    "             \setlocal omnifunc=syntaxcomplete#Complete |
    "             \endif
" endif

hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

" Some convenient mappings
"inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <CR>     pumvisible() ? "\<C-y>" : "\<CR>"

inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
" inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
" inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

" Automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" set completeopt=menu,preview,longest
set completeopt=menuone
" }}}

" ctags {{{
set tags=./tags;/,~/.vimtags

" Make tags placed in .git/tags file available in all levels of a repository
let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
if gitroot != ''
    let &tags = &tags . ',' . gitroot . '/.git/tags'
endif
" }}}

" autoread {{{
set autoread
if !has("gui_running")
    augroup checktime
        autocmd!
        autocmd BufEnter     * silent! checktime
        autocmd CursorHold   * silent! checktime
        autocmd CursorHoldI  * silent! checktime
        autocmd CursorMoved  * silent! checktime
        autocmd CursorMovedI * silent! checktime
    augroup END
endif
" }}}

" }}}

" Funcations {{{
" Initialize directories {{{
if !has('nvim')
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = 'vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        let common_dir = parent . '/.' . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
else
    set backupdir-=.
    for backupdir in split(&backupdir,',')
        if exists("*mkdir")
            if !isdirectory(backupdir)
                call mkdir(backupdir)
            endif
        endif
        if !isdirectory(backupdir)
            echo "Warning: Unable to create backup directory: " . backupdir
            echo "Try: mkdir -p " . backupdir
        endif
    endfor
endif
" }}}

" Strip whitespace {{{
" function! StripTrailingWhitespace()
"     " Preparation: save last search, and cursor position.
"     let _s=@/
"     let l = line(".")
"     let c = col(".")
"     " do the business:
"     %s/\s\+$//e
"     " clean up: restore previous search history, and cursor position
"     let @/=_s
"     call cursor(l, c)
" endfunction
" autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" }}}

" Shell command {{{
function! s:RunShellCommand(cmdline)
    botright new

    setlocal buftype=nofile
    setlocal bufhidden=delete
    setlocal nobuflisted
    setlocal noswapfile
    setlocal nowrap
    setlocal filetype=shell
    setlocal syntax=shell

    call setline(1, a:cmdline)
    call setline(2, substitute(a:cmdline, '.', '=', 'g'))
    execute 'silent $read !' . escape(a:cmdline, '%#')
    setlocal nomodifiable
    1
endfunction

command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
" e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
" }}}
" }}}
